<?xml version="1.0"?>
<ruleset name="Common code sniffer ruleset based on PSR-2">
	<config name="installed_paths" value="../../slevomat/coding-standard" />

	<!-- Do not allow variable assignment in conditions -->
	<rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition" />
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator" />
	<!-- Check for useless conditions (eg: if ($var == true) return true;) -->
	<rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />
	<!-- Check for useless ternary operator (eg: $var === true ? true : false;) -->
	<rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />
	<!-- No Yoda shell pass! -->
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />

	<!-- Check for useless duplicated variable assignment -->
	<rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />

	<!-- Forbidden using of traits separated by comma -->
	<rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration" />

	<!-- Check for missing trailing comma in arrays -->
	<rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />

	<!-- Use \Throwable instead of \Exception on PHP 7+ -->
	<rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />
	<!-- Check for unreachable catch statements -->
	<rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />

	<!-- Lines around namespace declaration -->
	<rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing" />
	<!-- Lines around use declaration -->
	<rule ref="SlevomatCodingStandard.Namespaces.UseSpacing" />
	<!-- Use from same namespace is forbidden -->
	<rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
	<!-- Multiple uses per line are forbidden -->
	<rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine" />
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />

	<!-- Enforce space after colon in return type hint -->
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />
	<!-- Enforce space after type hint in parameters -->
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />

	<!-- Check for useless semicolons -->
	<rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />

	<!-- Check for empty comments -->
	<rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />

	<!-- Apply all rules from PSR-2 except space indention -->
	<rule ref="PSR2">
		<exclude name="Generic.WhiteSpace.DisallowTabIndent" />
		<exclude name="PSR2.ControlStructures.ControlStructureSpacing" />
	</rule>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent" />
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="indent" value="4" />
			<property name="tabIndent" value="true" />
		</properties>
	</rule>

	<!-- Control Structures must have at least one statement inside of the body. -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement" />
	<!-- If statements that are always evaluated should not be used. -->
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
	<!-- Methods should not be declared final inside of classes that are declared final. -->
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
	<!-- Methods should not be defined that only call the parent method. -->
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />
	<!-- There should only be one class defined in a file. -->
	<rule ref="Generic.Files.OneClassPerFile" />
	<!-- There should only be one interface defined in a file. -->
	<rule ref="Generic.Files.OneInterfacePerFile" />
	<!-- There should only be one trait defined in a file. -->
	<rule ref="Generic.Files.OneTraitPerFile" />
	<!-- Multiple statements are not allowed on a single line. -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements" />
	<!-- Exactly one space is allowed after a cast. -->
	<rule ref="Generic.Formatting.SpaceAfterCast" />

	<!-- Some functions should not appear in the code -->
	<rule ref="Generic.PHP.ForbiddenFunctions">
		<properties>
			<property name="forbiddenFunctions"
					  type="array"
					  value="var_dump=>null,dump=>null,phpinfo=>null,eval=>null,sizeof=>count" />
		</properties>
	</rule>

	<!-- When referencing arrays you should not put whitespace around the opening bracket or before the closing bracket. -->
	<rule ref="Squiz.Arrays.ArrayBracketSpacing" />

	<!-- Various array declaration rules (but use only some of them) -->
	<rule ref="Squiz.Arrays.ArrayDeclaration" />
	<rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed">
		<severity>0</severity>
	</rule>

	<!-- The asterisks in a doc comment should align. -->
	<rule ref="Squiz.Commenting.DocCommentAlignment">
		<exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar" />
	</rule>

	<!-- Doc comment formatting (but use only some of the rules) -->
	<rule ref="Generic.Commenting.DocComment" />
	<rule ref="Generic.Commenting.DocComment.ContentAfterOpen">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.ContentBeforeClose">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.MissingShort">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.TagValueIndent">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.NonParamGroup">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.ParamGroup">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.ParamNotFirst">
		<severity>0</severity>
	</rule>

	<!-- We allow empty catch statements -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"> <!-- compatibility with pre-3.2.3 versions -->
		<severity>0</severity>
	</rule>
	<!-- But the empty catch statements must have comment explaining why the exception is not handled -->
	<rule ref="Squiz.Commenting.EmptyCatchComment" />
	<!-- Tests that the ++ operators are used when possible and not used when it makes the code confusing. -->
	<rule ref="Squiz.Operators.IncrementDecrementUsage" />
	<!-- Casts should not have whitespace inside the parentheses. -->
	<rule ref="Squiz.WhiteSpace.CastSpacing" />
	<!-- Semicolons should not have spaces before them. -->
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
	<!-- The PHP constructs like echo, return, include, etc. should have one space after them. -->
	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
	<!-- The PHP keywords static, public, private, and protected should have one space after them. -->
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing" />
	<!-- Proper operator spacing -->
	<rule ref="Squiz.WhiteSpace.OperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true" />
		</properties>
	</rule>

	<!-- Verifies that operators have valid spacing surrounding them. -->
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
	<rule ref="Squiz.WhiteSpace.OperatorSpacing.NoSpaceBefore">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.OperatorSpacing.NoSpaceAfter">
		<severity>0</severity>
	</rule>

	<arg value="p" />
	<arg name="encoding" value="utf-8" />

	<exclude-pattern>./vendor/*</exclude-pattern>
</ruleset>
